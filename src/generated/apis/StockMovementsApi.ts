// tslint:disable
/**
 * OH 2.0 Api Documentation
 * OH 2.0 Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, HttpQuery, throwIfNullOrUndefined, encodeURI, OperationOpts, RawAjaxResponse } from '../runtime';
import {
    LotDTO,
    MovementDTO,
} from '../models';

export interface AlertCriticalQuantityRequest {
    medCode: number;
    qty: number;
}

export interface GetLotByMedicalRequest {
    medCode: number;
}

export interface GetMovements1Request {
    ref: string;
}

export interface GetMovements2Request {
    medCode?: number;
    medType?: string;
    wardId?: string;
    movType?: string;
    movFrom?: string;
    movTo?: string;
    lotPrepFrom?: string;
    lotPrepTo?: string;
    lotDueFrom?: string;
    lotDueTo?: string;
}

export interface GetMovements3Request {
    wardId: string;
    from: string;
    to: string;
}

export interface NewMultipleChargingMovementsRequest {
    ref: string;
    movementDTO: Array<MovementDTO>;
}

export interface NewMultipleDischargingMovementsRequest {
    ref: string;
    movementDTO: Array<MovementDTO>;
}

/**
 * no description
 */
export class StockMovementsApi extends BaseAPI {

    /**
     */
    alertCriticalQuantity({ medCode, qty }: AlertCriticalQuantityRequest): Observable<boolean>
    alertCriticalQuantity({ medCode, qty }: AlertCriticalQuantityRequest, opts?: OperationOpts): Observable<RawAjaxResponse<boolean>>
    alertCriticalQuantity({ medCode, qty }: AlertCriticalQuantityRequest, opts?: OperationOpts): Observable<boolean | RawAjaxResponse<boolean>> {
        throwIfNullOrUndefined(medCode, 'medCode', 'alertCriticalQuantity');
        throwIfNullOrUndefined(qty, 'qty', 'alertCriticalQuantity');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'med_code': medCode,
            'qty': qty,
        };

        return this.request<boolean>({
            url: '/medicalstockmovements/critical/check',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    getLotByMedical({ medCode }: GetLotByMedicalRequest): Observable<Array<LotDTO>>
    getLotByMedical({ medCode }: GetLotByMedicalRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Array<LotDTO>>>
    getLotByMedical({ medCode }: GetLotByMedicalRequest, opts?: OperationOpts): Observable<Array<LotDTO> | RawAjaxResponse<Array<LotDTO>>> {
        throwIfNullOrUndefined(medCode, 'medCode', 'getLotByMedical');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<Array<LotDTO>>({
            url: '/medicalstockmovements/lot/{med_code}'.replace('{med_code}', encodeURI(medCode)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     */
    getMovements(): Observable<Array<MovementDTO>>
    getMovements(opts?: OperationOpts): Observable<RawAjaxResponse<Array<MovementDTO>>>
    getMovements(opts?: OperationOpts): Observable<Array<MovementDTO> | RawAjaxResponse<Array<MovementDTO>>> {
        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<Array<MovementDTO>>({
            url: '/medicalstockmovements',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     */
    getMovements1({ ref }: GetMovements1Request): Observable<Array<MovementDTO>>
    getMovements1({ ref }: GetMovements1Request, opts?: OperationOpts): Observable<RawAjaxResponse<Array<MovementDTO>>>
    getMovements1({ ref }: GetMovements1Request, opts?: OperationOpts): Observable<Array<MovementDTO> | RawAjaxResponse<Array<MovementDTO>>> {
        throwIfNullOrUndefined(ref, 'ref', 'getMovements1');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<Array<MovementDTO>>({
            url: '/medicalstockmovements/{ref}'.replace('{ref}', encodeURI(ref)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     */
    getMovements2({ medCode, medType, wardId, movType, movFrom, movTo, lotPrepFrom, lotPrepTo, lotDueFrom, lotDueTo }: GetMovements2Request): Observable<Array<MovementDTO>>
    getMovements2({ medCode, medType, wardId, movType, movFrom, movTo, lotPrepFrom, lotPrepTo, lotDueFrom, lotDueTo }: GetMovements2Request, opts?: OperationOpts): Observable<RawAjaxResponse<Array<MovementDTO>>>
    getMovements2({ medCode, medType, wardId, movType, movFrom, movTo, lotPrepFrom, lotPrepTo, lotDueFrom, lotDueTo }: GetMovements2Request, opts?: OperationOpts): Observable<Array<MovementDTO> | RawAjaxResponse<Array<MovementDTO>>> {

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        const query: HttpQuery = {};

        if (medCode != null) { query['med_code'] = medCode; }
        if (medType != null) { query['med_type'] = medType; }
        if (wardId != null) { query['ward_id'] = wardId; }
        if (movType != null) { query['mov_type'] = movType; }
        if (movFrom != null) { query['mov_from'] = (movFrom as any).toISOString(); }
        if (movTo != null) { query['mov_to'] = (movTo as any).toISOString(); }
        if (lotPrepFrom != null) { query['lot_prep_from'] = (lotPrepFrom as any).toISOString(); }
        if (lotPrepTo != null) { query['lot_prep_to'] = (lotPrepTo as any).toISOString(); }
        if (lotDueFrom != null) { query['lot_due_from'] = (lotDueFrom as any).toISOString(); }
        if (lotDueTo != null) { query['lot_due_to'] = (lotDueTo as any).toISOString(); }

        return this.request<Array<MovementDTO>>({
            url: '/medicalstockmovements/filter/v2',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    getMovements3({ wardId, from, to }: GetMovements3Request): Observable<Array<MovementDTO>>
    getMovements3({ wardId, from, to }: GetMovements3Request, opts?: OperationOpts): Observable<RawAjaxResponse<Array<MovementDTO>>>
    getMovements3({ wardId, from, to }: GetMovements3Request, opts?: OperationOpts): Observable<Array<MovementDTO> | RawAjaxResponse<Array<MovementDTO>>> {
        throwIfNullOrUndefined(wardId, 'wardId', 'getMovements3');
        throwIfNullOrUndefined(from, 'from', 'getMovements3');
        throwIfNullOrUndefined(to, 'to', 'getMovements3');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'ward_id': wardId,
            'from': (from as any).toISOString(),
            'to': (to as any).toISOString(),
        };

        return this.request<Array<MovementDTO>>({
            url: '/medicalstockmovements/filter/v1',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    newMultipleChargingMovements({ ref, movementDTO }: NewMultipleChargingMovementsRequest): Observable<boolean>
    newMultipleChargingMovements({ ref, movementDTO }: NewMultipleChargingMovementsRequest, opts?: OperationOpts): Observable<RawAjaxResponse<boolean>>
    newMultipleChargingMovements({ ref, movementDTO }: NewMultipleChargingMovementsRequest, opts?: OperationOpts): Observable<boolean | RawAjaxResponse<boolean>> {
        throwIfNullOrUndefined(ref, 'ref', 'newMultipleChargingMovements');
        throwIfNullOrUndefined(movementDTO, 'movementDTO', 'newMultipleChargingMovements');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'ref': ref,
        };

        return this.request<boolean>({
            url: '/medicalstockmovements/charge',
            method: 'POST',
            headers,
            query,
            body: movementDTO,
        }, opts?.responseOpts);
    };

    /**
     */
    newMultipleDischargingMovements({ ref, movementDTO }: NewMultipleDischargingMovementsRequest): Observable<boolean>
    newMultipleDischargingMovements({ ref, movementDTO }: NewMultipleDischargingMovementsRequest, opts?: OperationOpts): Observable<RawAjaxResponse<boolean>>
    newMultipleDischargingMovements({ ref, movementDTO }: NewMultipleDischargingMovementsRequest, opts?: OperationOpts): Observable<boolean | RawAjaxResponse<boolean>> {
        throwIfNullOrUndefined(ref, 'ref', 'newMultipleDischargingMovements');
        throwIfNullOrUndefined(movementDTO, 'movementDTO', 'newMultipleDischargingMovements');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'ref': ref,
        };

        return this.request<boolean>({
            url: '/medicalstockmovements/discharge',
            method: 'POST',
            headers,
            query,
            body: movementDTO,
        }, opts?.responseOpts);
    };

}
